<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Chat</title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <script src="https://code.jquery.com/jquery-1.10.2.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        $(function() {
            var socket = io();
            var username;

            /**
             * Inicio del intercambio de mensajes entre el cliente y el servidor. Se le envia al servidor el nombre del usuario.
             */

            socket.emit('conexion', {'username': document.getElementById("prueba").innerHTML});

            /**
             * Actualiza las listas de conectados y de salas de chat
             */

            socket.on('actualizar partidas', function (data) {
                $("#games-list").empty();
                for (j = 0; j < data.cantidadrooms; j++) {
                    $("#games-list").append("<li class='client-list-item'> <span class='client-list-name'> <b>" + data.rooms[j] + "</b> </span> </li>");
                }

                $("#connected-list").empty()
                for (i = 0; i < data.cantidadusers; i++) {
                    $("#connected-list  ").append("<li class='client-list-item'> <span class='client-list-name'> <b>" + data.usuarios[i] + "</b> </span> </li>"); //los usarios llegan dentro de data en realidad
                }
            });

            /**
             * setea el room para este usuario
             */

            socket.on('set room', function (data) {

                $("#nombre-room-hidden").empty();
                $("#nombre-room-hidden").append(data.rom);

                socket.emit('sincronizar set',{'rom':data.rom,'user':data.username});
            });

            /**
             * Saca el lobby y pone el chat, si el nombreroom no existia de antemano
             */

            socket.on('sync-game', function (data) {

                var username = $("#prueba").text();

                $("#main-lobby-div").hide(); //al clickear el lobby "desaparece" y aparece el chat
                $("#main-chat-div").appendTo('body').show('slow');

                if ($('#username-chat').is(':empty')) {
                    $("#username-chat").append(username);
                }

                socket.emit('new game', {'alias': username, 'nombreroom': data.nombreroom});
            });

            /**
             * Saca el lobby y pone el chat, si el nombreroom existia de antemano
             */

            socket.on('sync-join', function (data) {

                var username = $("#prueba").text();

                $("#main-lobby-div").hide(); //al clickear el lobby "desaparece" y aparece el chat
                $("#main-chat-div").appendTo('body').show('slow');

                if ($('#username-chat').is(':empty')) {
                    $("#username-chat").append(username);
                }

                socket.emit('join game', {'user': username, 'nombreroom': data.nombreroom});
            });

            /**
             * Controla el boton 'crear partida'
             */

            $('#newgame-button').on('click', function () { //jquery para cuando clickean el boton

                var username = $("#prueba").text();

                var nombreroom = document.getElementById('nombre-room').value;

                if(nombreroom!=""){

                    socket.emit('existe-room', {'alias': username, 'nombreroom': nombreroom});
                }
            });

            /**
             * Controla el boton 'unirse a partida'
             */

            $('#join-button').on('click', function () {

                var username = $("#prueba").text();

                var nombreroom = document.getElementById('nombre-room').value;  //la seleccion de la lista "games-list"

                if(nombreroom!="") {

                    socket.emit('same-room',{'alias': username, 'nombreroom': nombreroom} );
                }
            });

            var FADE_TIME = 150; // ms
            var TYPING_TIMER_LENGTH = 400; // ms
            var COLORS = [
                '#e21400', '#91580f', '#f8a700', '#f78b00',
                '#58dc00', '#287b00', '#a8f07a', '#4ae8c4',
                '#3b88eb', '#3824aa', '#a700ff', '#d300e7'
            ];

            // Initialize variables
            var $window = $(window);
            var $usernameInput = $('.usernameInput'); // Input for username

            var $messages = $('.messages'); // Messages area
            var $inputMessage = $('.inputMessage'); // Input message input box

            var $chatPage = $('.chat.page'); // The chatroom page

            var connected = false;
            var typing = false;
            var lastTypingTime;
            var $currentInput = $usernameInput.focus();


            function addParticipantsMessage (data) {
                var message = '';
                if (data.numUsers === 1) {
                    message += "there's 1 participant";
                } else {
                    message += "there are " + data.numUsers + " participants";
                }
                log(message);
            }

            // Sends a chat message
            function sendMessage () {
                var habitacion = document.getElementById('nombre-room-hidden').innerHTML;
                var message = $inputMessage.val();

                // Prevent markup from being injected into the message
                message = cleanInput(message);
                // if there is a non-empty message and a socket connection
                if (message && connected) {
                    $inputMessage.val('');
                    addChatMessage({
                        username:document.getElementById('username-chat').innerHTML,
                        message: message
                    });
                    // tell server to execute 'new message' and send along one parameter
                    socket.emit('new message', {'message':message,'habitacion':habitacion});

                }
            }

            // Log a message
            function log (message, options) {
                var $el = $('<li>').addClass('log').text(message);
                addMessageElement($el, options);
            }

            // Adds the visual chat message to the message list
            function addChatMessage (data, options) {
                // Don't fade the message in if there is an 'X was typing'
                var $typingMessages = getTypingMessages(data);
                options = options || {};
                if ($typingMessages.length !== 0) {
                    options.fade = false;
                    $typingMessages.remove();
                }

                var $usernameDiv = $('<span class="username"/>')
                    .text(data.username)
                    .css('color', getUsernameColor(data.username));
                var $messageBodyDiv = $('<span class="messageBody">')
                    .text(data.message);

                var typingClass = data.typing ? 'typing' : '';
                var $messageDiv = $('<li class="message"/>')
                    .data('username', data.username)
                    .addClass(typingClass)
                    .append($usernameDiv, $messageBodyDiv);

                addMessageElement($messageDiv, options);
            }

            // Adds the visual chat typing message
            function addChatTyping (data) {
                data.typing = true;
                data.message = 'is typing';
                addChatMessage(data);
            }

            // Removes the visual chat typing message
            function removeChatTyping (data) {
                getTypingMessages(data).fadeOut(function () {
                    $(this).remove();
                });
            }

            // Adds a message element to the messages and scrolls to the bottom
            // el - The element to add as a message
            // options.fade - If the element should fade-in (default = true)
            // options.prepend - If the element should prepend
            //   all other messages (default = false)
            function addMessageElement (el, options) {
                var $el = $(el);

                // Setup default options
                if (!options) {
                    options = {};
                }
                if (typeof options.fade === 'undefined') {
                    options.fade = true;
                }
                if (typeof options.prepend === 'undefined') {
                    options.prepend = false;
                }

                // Apply options
                if (options.fade) {
                    $el.hide().fadeIn(FADE_TIME);
                }
                if (options.prepend) {
                    $messages.prepend($el);
                } else {
                    $messages.append($el);
                }
                $messages[0].scrollTop = $messages[0].scrollHeight;
            }

            // Prevents input from having injected markup
            function cleanInput (input) {
                return $('<div/>').text(input).text();
            }

            // Updates the typing event
            function updateTyping () {
                if (connected) {
                    if (!typing) {
                        typing = true;
                        socket.emit('typing');
                    }
                    lastTypingTime = (new Date()).getTime();

                    setTimeout(function () {
                        var typingTimer = (new Date()).getTime();
                        var timeDiff = typingTimer - lastTypingTime;
                        if (timeDiff >= TYPING_TIMER_LENGTH && typing) {
                            socket.emit('stop typing');
                            typing = false;
                        }
                    }, TYPING_TIMER_LENGTH);
                }
            }

            // Gets the 'X is typing' messages of a user
            function getTypingMessages (data) {
                return $('.typing.message').filter(function (i) {
                    return $(this).data('username') === data.username;
                });
            }

            // Gets the color of a username through our hash function
            function getUsernameColor (username) {
                // Compute hash code
                var hash = 7;
                for (var i = 0; i < username.length; i++) {
                    hash = username.charCodeAt(i) + (hash << 5) - hash;
                }
                // Calculate color
                var index = Math.abs(hash % COLORS.length);
                return COLORS[index];
            }

            /**
             * Keyboard events
             */
            $window.onunload = function (e) {
                socket.emit('reconnect',"asdasd");
            }
            $window.keydown (function (e) {

                if (e.keyCode === 116) {
                    return false;
                }
            });

            $window.keydown(function (event) {
                // Auto-focus the current input when a key is typed
                if (!(event.ctrlKey || event.metaKey || event.altKey)) {
                    $currentInput.focus();
                }
                // When the client hits ENTER on their keyboard
                if (event.which === 13) {
                    if (true) {
                        sendMessage();
                        socket.emit('stop typing');
                        typing = false;
                    }
                }
            });

            $inputMessage.on('input', function() {
                updateTyping();
            });

            /**
             * Click events
             */

            // Focus input when clicking on the message input's border
            $inputMessage.click(function () {
                $inputMessage.focus();
            });

            /**
             * Sockets events
             */

            // Whenever the server emits 'login', log the login message
            socket.on('login', function (data) {
                connected = true;
                // Display the welcome message
                var message = "Welcome to Diplomacy Chat – ";
                log(message, {
                    prepend: true
                });

                addParticipantsMessage(data);
            });

            // Whenever the server emits 'new message', update the chat body
            socket.on('new message', function (data) {
                addChatMessage(data);
            });

            socket.on('error',function(data){
                alert(data.error());
            });

            // Whenever the server emits 'user joined', log it in the chat body
            socket.on('user joined', function (data) {
                log(data.username + ' joined');
                addParticipantsMessage(data);
            });

            socket.on('iniciar',function(data){
                // If the username is valid
                if (data.username) {
                    $chatPage.show();
                    $currentInput = $inputMessage.focus();
                    // Tell the server your username
                    socket.emit('add user', {'username':data.username,'nombreroom':data.nombreroom});
                }
            });

            // Whenever the server emits 'user left', log it in the chat body
            socket.on('user left', function (data) {
                log(data.username + ' left');
                addParticipantsMessage(data);
                removeChatTyping(data);
            });

            // Whenever the server emits 'typing', show the typing message
            socket.on('typing', function (data) {
                addChatTyping(data);
            });

            // Whenever the server emits 'stop typing', kill the typing message
            socket.on('stop typing', function (data) {
                removeChatTyping(data);
            });
            socket.on('disconnect', function () {
                log('you have been disconnected');
            });

            socket.on('sync-conect', function (data) {
                socket.emit('conexion', {'username': data.username});
            });

            /**
             * Controla el boton 'salir' dentro del chat
             */

            $('#leave-button').on('click', function () {
                var myNode = document.getElementById("msg");
                myNode.innerHTML = '';

                $("#main-chat-div").hide();
                $("#main-lobby-div").appendTo('body').show('slow');

                socket.emit('other-disconnect', "");
            });

        });
    </script>
</head>
<body>


<div class="lobby" id="main-lobby-div">
    <div class="margenes-lobby">
        <p hidden id="prueba"><%= usenam %></p>
        <h1> Bienvenido al Lobby </h1>
        <br>
        <div class="col-md-3">
            <h3> Usuarios en espera </h3>
            <div class = "wrapper">
                <ul  id="connected-list">
                </ul>
            </div>
            <br>
        </div>
        <div class="col-md-3" >
            <h3> Partidas en curso </h3>
            <div class = "wrapper">
                <ul  id="games-list"  style="list-style-type:none;">
                </ul>
            </div>
            <br>
            <input class="clase-input" id="nombre-room" autocomplete="off" /><br><br>
            <button type="button" class="btn btn-primary btn-block2 btn-large" id="newgame-button">Crear nueva partida</button><br><br>
            <button type="button" class="btn btn-primary btn-block2 btn-large" id="join-button">Unirse a partida</button>
        </div>
        <div class="col-md-1">
        </div>
    </div>
</div>


<div class="row" id="main-chat-div" style="display:none;">

    <h2 hidden id="username-chat"></h2>
    <h2 hidden id="nombre-room-hidden"></h2>
    <ul class="pages">
        <li class="chat page">
            <button class="btn btn-primary btn-large" type="button" id="leave-button">Salir</button>
            <div class="chatArea">
                <ul id="msg" class="messages"></ul>
            </div>
            <input class="inputMessage" placeholder="Type here..."/>
        </li>
    </ul>
</div>


</body>
</html>
